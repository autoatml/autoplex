name: Update devcontainer.json on Release

on:
  workflow_dispatch:
  release:
    types: [created] # Runs only when a new release is created

permissions:
  contents: write  # Allow the workflow to push changes to the repository
  pull-requests: write  # Allow the workflow to create pull requests

jobs:
  update-version:
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v3

    # Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    # Run the script to update the version in devcontainer.json
    - name: Update devcontainer.json with new version
      run: |
        #!/bin/bash

        # Fetch the version from pyproject.toml
        VERSION=$(grep 'version =' pyproject.toml | head -n 1 | sed -E 's/version = "([^\"]+)"/\1/')

        # Debug the version extracted
        echo "Extracted VERSION: $VERSION"

        # Escape any special characters in VERSION that could cause issues with sed (like `/` or `:`)
        VERSION_ESCAPED=$(echo "$VERSION" | sed 's/[&/\]/\\&/g')

        # Update the version in devcontainer.json
        # Using the escaped version to safely substitute in the JSON file
        sed -i -E "s|ghcr.io/autoatml/autoplex/autoplex-python-3.10:[^\"]*|ghcr.io/autoatml/autoplex/autoplex-python-3.10:$VERSION_ESCAPED|" .devcontainer/devcontainer.json

        echo "Updated devcontainer.json with version $VERSION"

    # Check if there are changes in devcontainer.json
    - name: Check for changes
      run: |
        if git diff --exit-code .devcontainer/devcontainer.json; then
          echo "No changes to commit."
          echo "commit_needed=false" >> $GITHUB_ENV
        else
          echo "Changes detected."
          echo "commit_needed=true" >> $GITHUB_ENV
        fi

    # Commit and push the changes to a new branch
    - name: Commit and push changes
      if: env.commit_needed == 'true'
      run: |
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"

        # Try to checkout the `update-devcontainer` branch, create if it doesn't exist
        if git rev-parse --verify origin/update-devcontainer; then
          git checkout update-devcontainer
          git pull origin update-devcontainer
        else
          git checkout -b update-devcontainer
        fi

        git add .devcontainer/devcontainer.json
        git commit -m "Update devcontainer.json with new version tag $VERSION"
        git push origin $BRANCH_NAME
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Create a pull request
    - name: Create Pull Request
      if: env.commit_needed == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "Update devcontainer.json with new version tag $VERSION"
        branch: update-devcontainer
        base: main
        title: "Update devcontainer.json with new version tag $VERSION"
        body: |
          This PR updates the devcontainer.json file with the new version tag $VERSION.
