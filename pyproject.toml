[build-system]
requires = [
  "setuptools>=65.0.0",
  "wheel",
]
build-backend = "setuptools.build_meta"

[project]
name = "autoplex"
description = "Automated machine-learned Potential Landscape explorer"
readme = "README.md"
keywords = ["high-throughput", "automated", "mlpotential"]
license = { text = "MIT License" }
authors = [{ name = "Janine George", email = "janine.george@bam.de" }]
version = "0.2.9"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
]
requires-python = ">=3.9"
dependencies = [
     "pymatgen>=2024.8.9",
     "atomate2[strict]@git+https://github.com/QuantumChemist/atomate2.git@adjust_get_supercell_size",
     #"FireWorks>=2.0.3",
     "ase==3.23.0",
     "matgl==1.1.3",
     #"quippy-ase==0.9.14",
     "numpy==1.26.4",
     "mace-torch==0.3.4",
     "lightning-utilities==0.11.2",
     "typing",
     "nequip",
     "hiphive",
     "dgl==2.1.0",
     "torchdata==0.7.1",
]

[tool.setuptools.packages.find]
exclude = ["tutorials", "tests"]

[tool.setuptools.package-data]
"autoplex.fitting.common" = ["gap-defaults.json"]

[project.optional-dependencies]

docs = [
    "autodoc_pydantic==2.0.1",
    "ipython",
    "jsonschema[format]",
    "myst_parser==2.0.0",
    "numpydoc==1.6.0",
    "sphinx-copybutton==0.5.2",
    "sphinx==7.2.6",
    "sphinx_design==0.5.0",
    "myst-nb==1.0.0",
    "sphinx-book-theme==1.1.0",
    "sphinxcontrib-mermaid",

]

strict = [
     "pymatgen>=2024.8.9",
     "atomate2[strict]@git+https://github.com/QuantumChemist/atomate2.git@adjust_get_supercell_size",
     #"FireWorks==2.0.3",
     # last known working ASE version: https://gitlab.com/ase/ase@2bab58f4e
     #"ase@git+https://gitlab.com/ase/ase.git@2bab58f4e",
     #"quippy-ase==0.9.14",
     "ase==3.23.0",
     "mace-torch==0.3.4",
     "lightning-utilities==0.11.2",
     "numpy==1.26.4",
     "typing",
     #"jobflow==0.1.13",
     #"pydantic==1.10.9",
     #"pymatgen-analysis-defects==2023.8.22",
     "dgl==2.1.0",
     "torchdata==0.7.1",
]
dev = ["pre-commit>=2.12.1"]

[tool.versioningit.vcs]
method = "git"
default-tag = "0.0.1"

[tool.flake8]
exclude = ".git,test"
max-line-length = 120
extend-ignore = "E203,W503,E501,F401,RST21,E741,W291,W293,E231"
select = "C, E, F, W, B"
min-python-version = "3.9.0"
docstring-convention = "numpy"

[tool.cibuildwheel.linux]
archs = ["auto64"]
skip = ["*musllinux*"]
before-all = "ln -s /usr/lib64/libgfortran.so.5 /usr/lib64/libgfortran.so.3"

[tool.cibuildwheel.macos]
repair-wheel-command = "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel} --ignore-missing-dependencies"

[tool.ruff]
target-version = "py39"
line-length = 120
select = [
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "D",      # pydocstyle
    "E",      # pycodestyle error
    "EXE",    # flake8-executable
    "F",      # pyflakes
    "FA",     # flake8-future-annotations
    "FBT003", # boolean-positional-value-in-call
    "FLY",    # flynt
    "I",      # isort
    "ICN",    # flake8-import-conventions
    "ISC",    # flake8-implicit-str-concat
    "PD",     # pandas-vet
    "PERF",   # perflint
    "PIE",    # flake8-pie
    "PL",     # pylint
    "PT",     # flake8-pytest-style
    "PYI",    # flakes8-pyi
    "Q",      # flake8-quotes
    "RET",    # flake8-return
    "RSE",    # flake8-raise
    "RUF",    # Ruff-specific rules
    "SIM",    # flake8-simplify
    "SLOT",   # flake8-slots
    "TCH",    # flake8-type-checking
    "TID",    # flake8-tidy-imports
    "UP",     # pyupgrade
    "W",      # pycodestyle warning
    "YTT",    # flake8-2020
]
ignore = [
    "PD011",   # pandas-use-of-dot-values
    "PERF203", # try-except-in-loop
    "PLR",     # pylint-refactor
    "PT004",   # pytest-missing-fixture-name-underscore
    "PT006",   # pytest-parametrize-names-wrong-type
    "RUF013",  # implicit-optional
    # TODO remove PT011, pytest.raises() should always check err msg
    "PT011", # pytest-raises-too-broad
    "PT013", # pytest-incorrect-pytest-import
]
pydocstyle.convention = "numpy"
isort.known-first-party = ["autoplex"]

[tool.pydocstyle]
ignore = "D100,D104,D105,D106,D107,D200,D203,D205,D212,D213,D301,D400,D401,D402,D403,D404,D406,D407,D413,D415"

isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"*/tests/*" = ["D"]
"tasks.py" = ["D"]

[tool.pytest.ini_options]
addopts = "-x --durations=30 --quiet -rxXs --color=yes -p no:warnings"

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "@deprecated",
  "show_plot",
]

# omit everything in test directory from coverage
[tool.coverage.run]
include = ["autoplex/*"]

[tool.mypy]
ignore_missing_imports = true
namespace_packages = true
explicit_package_bases = true
no_implicit_optional = false
exclude = ['tutorials']


[tool.codespell]
ignore-words-list = "titel,alls,ans,nd,mater,nwo,te,hart,ontop,ist,ot,fo"
check-filenames = true
